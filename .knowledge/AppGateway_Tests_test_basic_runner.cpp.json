{"is_source_file": true, "format": "C++", "description": "This is a minimal testing framework implementation for C++ source code, which defines test registration, assertions, and a main function to execute registered tests. The code facilitates defining, registering, and running simple unit tests without relying on external testing libraries like Google Test.", "external_files": ["<cstdlib>", "<iostream>", "<vector>", "<functional>", "<string>", "<stdexcept>"], "external_methods": ["std::vector::push_back", "std::cerr", "std::runtime_error::runtime_error", "std::cout", "exit", "mini::registry", "mini::assert_true"], "published": ["mini::registry", "mini::assert_true"], "classes": [{"name": "TestCase", "description": "Represents a test case with a name and a function to execute."}, {"name": "Registrar", "description": "Handles registration of test cases by adding them to the global registry."}], "methods": [{"name": "std::vector<TestCase> & registry()", "description": "Returns a reference to the static vector holding all registered test cases.", "scope": "mini", "scopeKind": "namespace"}, {"name": "void assert_true(bool expr,const char * exprStr,const char * file,int line)", "description": "Performs an assertion check, outputs an error message, and throws if the expression is false.", "scope": "mini", "scopeKind": "namespace"}, {"name": "Registrar(const std::string & name,TestFn fn)", "scope": "mini::Registrar", "scopeKind": "struct", "description": "unavailable"}, {"name": "int main()", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["mini::registry()", "mini::assert_true()", "std::cerr <<", "throw std::runtime_error", "std::cout <<"], "search-terms": ["minimal C++ test framework", "test registration", "assertion macro", "test runner", "absence of Google Test"], "state": 2, "file_id": 524, "knowledge_revision": 1040, "git_revision": "aff7c6e96bdf03cbb7d4da3dbf4b19977e5db575", "ctags": [{"_type": "tag", "name": "EXPECT_EQ", "path": "/home/kavia/workspace/code-generation/app-gateway1/AppGateway/Tests/test_basic_runner.cpp", "pattern": "/^#define EXPECT_EQ(/", "file": true, "language": "C++", "kind": "macro", "signature": "(a,b)"}, {"_type": "tag", "name": "EXPECT_FALSE", "path": "/home/kavia/workspace/code-generation/app-gateway1/AppGateway/Tests/test_basic_runner.cpp", "pattern": "/^#define EXPECT_FALSE(/", "file": true, "language": "C++", "kind": "macro", "signature": "(x)"}, {"_type": "tag", "name": "EXPECT_NE", "path": "/home/kavia/workspace/code-generation/app-gateway1/AppGateway/Tests/test_basic_runner.cpp", "pattern": "/^#define EXPECT_NE(/", "file": true, "language": "C++", "kind": "macro", "signature": "(a,b)"}, {"_type": "tag", "name": "EXPECT_TRUE", "path": "/home/kavia/workspace/code-generation/app-gateway1/AppGateway/Tests/test_basic_runner.cpp", "pattern": "/^#define EXPECT_TRUE(/", "file": true, "language": "C++", "kind": "macro", "signature": "(x)"}, {"_type": "tag", "name": "Registrar", "path": "/home/kavia/workspace/code-generation/app-gateway1/AppGateway/Tests/test_basic_runner.cpp", "pattern": "/^        Registrar(const std::string& name, TestFn fn) { registry().push_back({name, std::move(fn/", "file": true, "language": "C++", "kind": "function", "signature": "(const std::string & name,TestFn fn)", "scope": "mini::Registrar", "scopeKind": "struct"}, {"_type": "tag", "name": "Registrar", "path": "/home/kavia/workspace/code-generation/app-gateway1/AppGateway/Tests/test_basic_runner.cpp", "pattern": "/^    struct Registrar {$/", "file": true, "language": "C++", "kind": "struct", "scope": "mini", "scopeKind": "namespace"}, {"_type": "tag", "name": "TEST", "path": "/home/kavia/workspace/code-generation/app-gateway1/AppGateway/Tests/test_basic_runner.cpp", "pattern": "/^#define TEST(/", "file": true, "language": "C++", "kind": "macro", "signature": "(SUITE,NAME)"}, {"_type": "tag", "name": "TestCase", "path": "/home/kavia/workspace/code-generation/app-gateway1/AppGateway/Tests/test_basic_runner.cpp", "pattern": "/^    struct TestCase { std::string name; TestFn fn; };$/", "file": true, "language": "C++", "kind": "struct", "scope": "mini", "scopeKind": "namespace"}, {"_type": "tag", "name": "TestFn", "path": "/home/kavia/workspace/code-generation/app-gateway1/AppGateway/Tests/test_basic_runner.cpp", "pattern": "/^    using TestFn = std::function<void()>;$/", "file": true, "language": "C++", "kind": "typedef", "scope": "mini", "scopeKind": "namespace"}, {"_type": "tag", "name": "assert_true", "path": "/home/kavia/workspace/code-generation/app-gateway1/AppGateway/Tests/test_basic_runner.cpp", "pattern": "/^    inline void assert_true(bool expr, const char* exprStr, const char* file, int line) {$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(bool expr,const char * exprStr,const char * file,int line)", "scope": "mini", "scopeKind": "namespace"}, {"_type": "tag", "name": "fn", "path": "/home/kavia/workspace/code-generation/app-gateway1/AppGateway/Tests/test_basic_runner.cpp", "pattern": "/^    struct TestCase { std::string name; TestFn fn; };$/", "file": true, "language": "C++", "typeref": "typename:TestFn", "kind": "member", "scope": "mini::TestCase", "scopeKind": "struct"}, {"_type": "tag", "name": "main", "path": "/home/kavia/workspace/code-generation/app-gateway1/AppGateway/Tests/test_basic_runner.cpp", "pattern": "/^int main() {$/", "language": "C++", "typeref": "typename:int", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "mini", "path": "/home/kavia/workspace/code-generation/app-gateway1/AppGateway/Tests/test_basic_runner.cpp", "pattern": "/^namespace mini {$/", "file": true, "language": "C++", "kind": "namespace"}, {"_type": "tag", "name": "name", "path": "/home/kavia/workspace/code-generation/app-gateway1/AppGateway/Tests/test_basic_runner.cpp", "pattern": "/^    struct TestCase { std::string name; TestFn fn; };$/", "file": true, "language": "C++", "typeref": "typename:std::string", "kind": "member", "scope": "mini::TestCase", "scopeKind": "struct"}, {"_type": "tag", "name": "registry", "path": "/home/kavia/workspace/code-generation/app-gateway1/AppGateway/Tests/test_basic_runner.cpp", "pattern": "/^    inline std::vector<TestCase>& registry() { static std::vector<TestCase> r; return r; }$/", "language": "C++", "typeref": "typename:std::vector<TestCase> &", "kind": "function", "signature": "()", "scope": "mini", "scopeKind": "namespace"}], "hash": "12d24057ea95142015f152cc899a4ef1", "format-version": 4, "code-base-name": "app-gateway", "filename": "AppGateway/Tests/test_basic_runner.cpp", "fields": [{"name": "TestFn fn", "scope": "mini::TestCase", "scopeKind": "struct", "description": "unavailable"}, {"name": "std::string name", "scope": "mini::TestCase", "scopeKind": "struct", "description": "unavailable"}], "revision_history": [{"1040": "aff7c6e96bdf03cbb7d4da3dbf4b19977e5db575"}]}