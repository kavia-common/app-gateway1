{"is_source_file": true, "format": "C++", "description": "Implementation of the ProviderRegistry class, managing registration, unregistration, resolution, and management of launch providers within the Plugin namespace.", "external_files": ["ProviderRegistry.h"], "external_methods": ["ILaunchProvider::OnStatus", "ILaunchProvider::OnForegroundChanged", "ILaunchProvider::Start", "ILaunchProvider::Stop", "ILaunchProvider::Info", "ILaunchProvider::SupportsScheme", "ILaunchProvider::SupportsAppId"], "published": ["ProviderRegistry"], "classes": [{"name": "ProviderRegistry", "description": "Manages a collection of launch providers, handles registration, unregistration, resolution, and callbacks."}], "methods": [{"name": "bool Register(const string & id,std::unique_ptr<ILaunchProvider> provider)", "description": "Registers a new launch provider with a given ID, sets callbacks if available.", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"name": "bool Unregister(const string & id)", "description": "Unregisters a provider by ID, stopping it if necessary.", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"name": "uint32_t StartAll(const Config & config)", "description": "Starts all registered providers with a given configuration.", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"name": "void StopAll()", "description": "Stops all registered providers.", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"name": "bool Resolve(const Config & config,const string & appId,const string & uri,const string & intent,const string & hint,Resolution & out) const", "description": "Resolves a provider based on URI scheme, app ID, intent, or defaults.", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"name": "ILaunchProvider * Get(const string & id) const", "description": "Retrieves a specific provider by ID.", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"name": "std::vector<ProviderInfo> Capabilities() const", "description": "Returns a list of provider capabilities.", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"name": "std::vector<ProviderState> GetProviders() const", "description": "Returns the current state information of all providers.", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"name": "void SetStatusCallback(ILaunchProvider::StatusCallback cb)", "description": "Sets a callback function for provider status updates.", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"name": "void SetForegroundCallback(ILaunchProvider::ForegroundCallback cb)", "description": "Sets a callback function for foreground change notifications.", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"name": "bool ResolveByScheme(const string & scheme,Resolution & out) const", "description": "Checks if any provider supports the given URI scheme.", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"name": "bool ResolveByAppId(Resolution & out) const", "description": "Checks if any provider supports app ID resolution.", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"name": "ProviderRegistry()", "scope": "Plugin::ProviderRegistry", "scopeKind": "class", "description": "unavailable"}, {"name": "~ProviderRegistry()", "scope": "Plugin::ProviderRegistry", "scopeKind": "class", "description": "unavailable"}], "calls": ["provider->OnStatus", "provider->OnForegroundChanged", "provider->Stop", "provider->Start", "provider->Info", "provider->SupportsScheme", "provider->SupportsAppId"], "search-terms": ["ProviderRegistry", "LaunchProvider", "resolve by scheme", "resolve by app id", "provider callbacks", "Provider State", "resolve intent"], "state": 2, "file_id": 28, "knowledge_revision": 57, "git_revision": "", "ctags": [{"_type": "tag", "name": "Capabilities", "path": "/home/kavia/workspace/code-generation/app-gateway1/LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "pattern": "/^    std::vector<ProviderInfo> ProviderRegistry::Capabilities() const {$/", "language": "C++", "typeref": "typename:std::vector<ProviderInfo>", "kind": "function", "signature": "() const", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "Get", "path": "/home/kavia/workspace/code-generation/app-gateway1/LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "pattern": "/^    ILaunchProvider* ProviderRegistry::Get(const string& id) const {$/", "language": "C++", "typeref": "typename:ILaunchProvider *", "kind": "function", "signature": "(const string & id) const", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "GetProviders", "path": "/home/kavia/workspace/code-generation/app-gateway1/LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "pattern": "/^    std::vector<ProviderState> ProviderRegistry::GetProviders() const {$/", "language": "C++", "typeref": "typename:std::vector<ProviderState>", "kind": "function", "signature": "() const", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "Plugin", "path": "/home/kavia/workspace/code-generation/app-gateway1/LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "pattern": "/^namespace Plugin {$/", "file": true, "language": "C++", "kind": "namespace"}, {"_type": "tag", "name": "ProviderRegistry", "path": "/home/kavia/workspace/code-generation/app-gateway1/LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "pattern": "/^    ProviderRegistry::ProviderRegistry()$/", "language": "C++", "kind": "function", "signature": "()", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "Register", "path": "/home/kavia/workspace/code-generation/app-gateway1/LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "pattern": "/^    bool ProviderRegistry::Register(const string& id, std::unique_ptr<ILaunchProvider> provider)/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const string & id,std::unique_ptr<ILaunchProvider> provider)", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "Resolve", "path": "/home/kavia/workspace/code-generation/app-gateway1/LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "pattern": "/^    bool ProviderRegistry::Resolve(const Config& config,$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const Config & config,const string & appId,const string & uri,const string & intent,const string & hint,Resolution & out) const", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "ResolveByAppId", "path": "/home/kavia/workspace/code-generation/app-gateway1/LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "pattern": "/^    bool ProviderRegistry::ResolveByAppId(Resolution& out) const {$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(Resolution & out) const", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "ResolveByScheme", "path": "/home/kavia/workspace/code-generation/app-gateway1/LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "pattern": "/^    bool ProviderRegistry::ResolveByScheme(const string& scheme, Resolution& out) const {$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const string & scheme,Resolution & out) const", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "SetForegroundCallback", "path": "/home/kavia/workspace/code-generation/app-gateway1/LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "pattern": "/^    void ProviderRegistry::SetForegroundCallback(ILaunchProvider::ForegroundCallback cb) {$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(ILaunchProvider::ForegroundCallback cb)", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "SetStatusCallback", "path": "/home/kavia/workspace/code-generation/app-gateway1/LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "pattern": "/^    void ProviderRegistry::SetStatusCallback(ILaunchProvider::StatusCallback cb) {$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "(ILaunchProvider::StatusCallback cb)", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "StartAll", "path": "/home/kavia/workspace/code-generation/app-gateway1/LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "pattern": "/^    uint32_t ProviderRegistry::StartAll(const Config& config) {$/", "language": "C++", "typeref": "typename:uint32_t", "kind": "function", "signature": "(const Config & config)", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "StopAll", "path": "/home/kavia/workspace/code-generation/app-gateway1/LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "pattern": "/^    void ProviderRegistry::StopAll() {$/", "language": "C++", "typeref": "typename:void", "kind": "function", "signature": "()", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "Unregister", "path": "/home/kavia/workspace/code-generation/app-gateway1/LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "pattern": "/^    bool ProviderRegistry::Unregister(const string& id) {$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const string & id)", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "~ProviderRegistry", "path": "/home/kavia/workspace/code-generation/app-gateway1/LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "pattern": "/^    ProviderRegistry::~ProviderRegistry() {$/", "language": "C++", "kind": "function", "signature": "()", "scope": "Plugin::ProviderRegistry", "scopeKind": "class"}], "hash": "be0e45dcc16d053de3e65a55f8a9f7c8", "format-version": 4, "code-base-name": "app-gateway", "filename": "LaunchDelegate/Source/ThunderLaunchDelegate/ProviderRegistry.cpp", "revision_history": [{"57": ""}]}