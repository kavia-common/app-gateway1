{"is_source_file": true, "format": "C++", "description": "Implementation of the SessionRegistry class managing application sessions and their metadata, including registration, unregistration, updates, and queries within the Plugin namespace.", "external_files": ["SessionRegistry.h", "<sstream>"], "external_methods": ["AppInfo::IsValid()", "NextSessionId()", "AppInfo::operator="], "published": ["RegisterApp", "UnregisterById", "UpdateCapabilities", "FindById", "ListPeers", "Count", "NextSessionId"], "classes": [{"name": "SessionRegistry", "description": "A class that maintains a registry of application sessions, allowing for registration, removal, updating, and listing of connected applications."}], "methods": [{"name": "bool RegisterApp(const AppInfo & infoIn,string & sessionOut,bool & isNew)", "description": "Registers an application with the provided AppInfo, generating a new session ID if needed, and indicating whether it is a new registration.", "scope": "Plugin::SessionRegistry", "scopeKind": "class"}, {"name": "bool UnregisterById(const string & id,AppInfo * removedOut)", "description": "Removes an application from the registry based on its ID, optionally returning the removed AppInfo.", "scope": "Plugin::SessionRegistry", "scopeKind": "class"}, {"name": "bool UpdateCapabilities(const string & id,const Core::JSON::VariantContainer & caps)", "description": "Updates the capabilities of an app identified by its ID.", "scope": "Plugin::SessionRegistry", "scopeKind": "class"}, {"name": "bool FindById(const string & id,AppInfo & out) const", "description": "Retrieves an AppInfo object for an app by its ID.", "scope": "Plugin::SessionRegistry", "scopeKind": "class"}, {"name": "std::vector<AppInfo> ListPeers(const string & excludeId) const", "description": "Lists all registered apps except the one with the specified ID.", "scope": "Plugin::SessionRegistry", "scopeKind": "class"}, {"name": "uint32_t Count() const", "description": "Returns the total number of registered applications.", "scope": "Plugin::SessionRegistry", "scopeKind": "class"}, {"name": "string NextSessionId(const string & id)", "description": "Generates a new session ID string based on the app's ID and an atomic counter.", "scope": "Plugin::SessionRegistry", "scopeKind": "class"}], "calls": ["AppInfo::IsValid()", "NextSessionId", "AppInfo::operator="], "search-terms": ["SessionRegistry", "RegisterApp", "UnregisterById", "UpdateCapabilities", "FindById", "ListPeers", "NextSessionId"], "state": 2, "file_id": 12, "knowledge_revision": 25, "git_revision": "", "ctags": [{"_type": "tag", "name": "Count", "path": "/home/kavia/workspace/code-generation/app-gateway1/App2AppProvider/Source/ThunderApp2AppProvider/SessionRegistry.cpp", "pattern": "/^    uint32_t SessionRegistry::Count() const {$/", "language": "C++", "typeref": "typename:uint32_t", "kind": "function", "signature": "() const", "scope": "Plugin::SessionRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "FindById", "path": "/home/kavia/workspace/code-generation/app-gateway1/App2AppProvider/Source/ThunderApp2AppProvider/SessionRegistry.cpp", "pattern": "/^    bool SessionRegistry::FindById(const string& id, AppInfo& out) const {$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const string & id,AppInfo & out) const", "scope": "Plugin::SessionRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "ListPeers", "path": "/home/kavia/workspace/code-generation/app-gateway1/App2AppProvider/Source/ThunderApp2AppProvider/SessionRegistry.cpp", "pattern": "/^    std::vector<AppInfo> SessionRegistry::ListPeers(const string& excludeId) const {$/", "language": "C++", "typeref": "typename:std::vector<AppInfo>", "kind": "function", "signature": "(const string & excludeId) const", "scope": "Plugin::SessionRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "NextSessionId", "path": "/home/kavia/workspace/code-generation/app-gateway1/App2AppProvider/Source/ThunderApp2AppProvider/SessionRegistry.cpp", "pattern": "/^    string SessionRegistry::NextSessionId(const string& id) {$/", "language": "C++", "typeref": "typename:string", "kind": "function", "signature": "(const string & id)", "scope": "Plugin::SessionRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "Plugin", "path": "/home/kavia/workspace/code-generation/app-gateway1/App2AppProvider/Source/ThunderApp2AppProvider/SessionRegistry.cpp", "pattern": "/^namespace Plugin {$/", "file": true, "language": "C++", "kind": "namespace"}, {"_type": "tag", "name": "RegisterApp", "path": "/home/kavia/workspace/code-generation/app-gateway1/App2AppProvider/Source/ThunderApp2AppProvider/SessionRegistry.cpp", "pattern": "/^    bool SessionRegistry::RegisterApp(const AppInfo& infoIn, string& sessionOut, bool& isNew) {$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const AppInfo & infoIn,string & sessionOut,bool & isNew)", "scope": "Plugin::SessionRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "UnregisterById", "path": "/home/kavia/workspace/code-generation/app-gateway1/App2AppProvider/Source/ThunderApp2AppProvider/SessionRegistry.cpp", "pattern": "/^    bool SessionRegistry::UnregisterById(const string& id, AppInfo* removedOut) {$/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const string & id,AppInfo * removedOut)", "scope": "Plugin::SessionRegistry", "scopeKind": "class"}, {"_type": "tag", "name": "UpdateCapabilities", "path": "/home/kavia/workspace/code-generation/app-gateway1/App2AppProvider/Source/ThunderApp2AppProvider/SessionRegistry.cpp", "pattern": "/^    bool SessionRegistry::UpdateCapabilities(const string& id, const Core::JSON::VariantContaine/", "language": "C++", "typeref": "typename:bool", "kind": "function", "signature": "(const string & id,const Core::JSON::VariantContainer & caps)", "scope": "Plugin::SessionRegistry", "scopeKind": "class"}], "hash": "42452ec0f3d6e73b25f367618f088776", "format-version": 4, "code-base-name": "app-gateway", "filename": "App2AppProvider/Source/ThunderApp2AppProvider/SessionRegistry.cpp", "revision_history": [{"25": ""}]}